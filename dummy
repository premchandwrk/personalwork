from flask import Flask, request, jsonify
import jwt
import json
from google.cloud import bigquery

# Path to your JSON key file
key_path = "key.json"

# Set environment variable to point to your key
import os
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = key_path

app = Flask(__name__)

# Load the user_access data from BigQuery
def load_user_access():
    client = bigquery.Client()
    query = """
        SELECT * FROM `project-414304.onepage.user_access`
    """
    query_job = client.query(query)
    results = query_job.result()
    user_access_data = {}
    for row in results:
        user_access_data[row.CWID] = {'user_name': row.user_name, 'email': row.email, 'access_group': row.access_group}
    print(user_access_data)
    return user_access_data

# API endpoint for user login
@app.route('/login', methods=['POST'])
def login():
    try:
        # Get JWT token from request
        token = request.json['token']
        
        # Decode JWT token to get CWID
        decoded_token = jwt.decode(token, verify=False)
        cwid = decoded_token.get('cwid')
        
        # Load user access data
        user_access_data = load_user_access()
        
        # Check if CWID exists in user access data
        if cwid in user_access_data:
            user_info = user_access_data[cwid]
            response = {
                'status': 'success',
                'message': 'Login successful',
                'user_name': user_info['user_name'],
                'email': user_info['email'],
                'access_group': user_info['access_group']
            }
        else:
            response = {
                'status': 'error',
                'message': 'User is not valid'
            }
        
        return jsonify(response), 200
    except Exception as e:
        response = {
            'status': 'error',
            'message': str(e)
        }
        return jsonify(response), 500

if __name__ == '__main__':
    app.run(debug=True)


# Replace NaN with None
df_with_none = df.where(pd.notna(df), None)

# Convert DataFrame to string, replacing None with 'null'
df_string = df_with_none.astype(object).where(pd.notna(df_with_none), 'null')


product_df = product_df[product_df['Product_Name'] != '']  # Filter out empty strings
crop_df = crop_df[crop_df['Crop_Name'] != '']  # Filter out empty strings

disease_df = disease_df[disease_df['Disease_Name'] != '']  # Filter out empty strings

pest_df = pest_df[pest_df['Pest_Name'] != '']  # Filter out empty strings

 # Merge Document information with normalized tables
    document_df = df.drop(columns=['Product_names', 'crop', 'Diseases', 'pest'])
    document_df['Product_ID'] = df['Product_names'].str.split(',').apply(lambda x: ','.join(str(product_df.loc[product_df['Product_Name'] == p.strip(), 'Product_ID'].iloc[0]) for p in x.split(',') if p.strip() != '' and pd.notnull(x)) if pd.notnull(x) else None)
    document_df['Crop_ID'] = df['crop'].str.split(',').apply(lambda x: ','.join(str(crop_df.loc[crop_df['Crop_Name'] == c.strip(), 'Crop_ID'].iloc[0]) for c in x.split(',') if c.strip() != '' and pd.notnull(x)) if pd.notnull(x) else None)
    document_df['Disease_ID'] = df['Diseases'].str.split(',').apply(lambda x: ','.join(str(disease_df.loc[disease_df['Disease_Name'] == d.strip(), 'Disease_ID'].iloc[0]) for d in x.split(',') if d.strip() != '' and pd.notnull(x)) if pd.notnull(x) else None)
    document_df['Pest_ID'] = df['pest'].str.split(',').apply(lambda x: ','.join(str(pest_df.loc[pest_df['Pest_Name'] == p.strip(), 'Pest_ID'].iloc[0]) for p in x.split(',') if p.strip() != '' and pd.notnull(x)) if pd.notnull(x) else None)
